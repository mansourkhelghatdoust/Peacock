/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package usyd.distributed.scheduler.peacock.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-02")
public class TLocalFullProbe implements org.apache.thrift.TBase<TLocalFullProbe, TLocalFullProbe._Fields>, java.io.Serializable, Cloneable, Comparable<TLocalFullProbe> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLocalFullProbe");

  private static final org.apache.thrift.protocol.TField FULL_PROBE_FIELD_DESC = new org.apache.thrift.protocol.TField("fullProbe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LOCAL_ENTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("localEnterTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LOCAL_WAITING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("localWaitingTime", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TLocalFullProbeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TLocalFullProbeTupleSchemeFactory();

  public TFullProbe fullProbe; // required
  public long localEnterTime; // required
  public long localWaitingTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FULL_PROBE((short)1, "fullProbe"),
    LOCAL_ENTER_TIME((short)2, "localEnterTime"),
    LOCAL_WAITING_TIME((short)3, "localWaitingTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FULL_PROBE
          return FULL_PROBE;
        case 2: // LOCAL_ENTER_TIME
          return LOCAL_ENTER_TIME;
        case 3: // LOCAL_WAITING_TIME
          return LOCAL_WAITING_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOCALENTERTIME_ISSET_ID = 0;
  private static final int __LOCALWAITINGTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FULL_PROBE, new org.apache.thrift.meta_data.FieldMetaData("fullProbe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFullProbe.class)));
    tmpMap.put(_Fields.LOCAL_ENTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("localEnterTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCAL_WAITING_TIME, new org.apache.thrift.meta_data.FieldMetaData("localWaitingTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLocalFullProbe.class, metaDataMap);
  }

  public TLocalFullProbe() {
  }

  public TLocalFullProbe(
    TFullProbe fullProbe,
    long localEnterTime,
    long localWaitingTime)
  {
    this();
    this.fullProbe = fullProbe;
    this.localEnterTime = localEnterTime;
    setLocalEnterTimeIsSet(true);
    this.localWaitingTime = localWaitingTime;
    setLocalWaitingTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLocalFullProbe(TLocalFullProbe other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFullProbe()) {
      this.fullProbe = new TFullProbe(other.fullProbe);
    }
    this.localEnterTime = other.localEnterTime;
    this.localWaitingTime = other.localWaitingTime;
  }

  public TLocalFullProbe deepCopy() {
    return new TLocalFullProbe(this);
  }

  @Override
  public void clear() {
    this.fullProbe = null;
    setLocalEnterTimeIsSet(false);
    this.localEnterTime = 0;
    setLocalWaitingTimeIsSet(false);
    this.localWaitingTime = 0;
  }

  public TFullProbe getFullProbe() {
    return this.fullProbe;
  }

  public TLocalFullProbe setFullProbe(TFullProbe fullProbe) {
    this.fullProbe = fullProbe;
    return this;
  }

  public void unsetFullProbe() {
    this.fullProbe = null;
  }

  /** Returns true if field fullProbe is set (has been assigned a value) and false otherwise */
  public boolean isSetFullProbe() {
    return this.fullProbe != null;
  }

  public void setFullProbeIsSet(boolean value) {
    if (!value) {
      this.fullProbe = null;
    }
  }

  public long getLocalEnterTime() {
    return this.localEnterTime;
  }

  public TLocalFullProbe setLocalEnterTime(long localEnterTime) {
    this.localEnterTime = localEnterTime;
    setLocalEnterTimeIsSet(true);
    return this;
  }

  public void unsetLocalEnterTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCALENTERTIME_ISSET_ID);
  }

  /** Returns true if field localEnterTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalEnterTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCALENTERTIME_ISSET_ID);
  }

  public void setLocalEnterTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCALENTERTIME_ISSET_ID, value);
  }

  public long getLocalWaitingTime() {
    return this.localWaitingTime;
  }

  public TLocalFullProbe setLocalWaitingTime(long localWaitingTime) {
    this.localWaitingTime = localWaitingTime;
    setLocalWaitingTimeIsSet(true);
    return this;
  }

  public void unsetLocalWaitingTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCALWAITINGTIME_ISSET_ID);
  }

  /** Returns true if field localWaitingTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalWaitingTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCALWAITINGTIME_ISSET_ID);
  }

  public void setLocalWaitingTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCALWAITINGTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FULL_PROBE:
      if (value == null) {
        unsetFullProbe();
      } else {
        setFullProbe((TFullProbe)value);
      }
      break;

    case LOCAL_ENTER_TIME:
      if (value == null) {
        unsetLocalEnterTime();
      } else {
        setLocalEnterTime((java.lang.Long)value);
      }
      break;

    case LOCAL_WAITING_TIME:
      if (value == null) {
        unsetLocalWaitingTime();
      } else {
        setLocalWaitingTime((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FULL_PROBE:
      return getFullProbe();

    case LOCAL_ENTER_TIME:
      return getLocalEnterTime();

    case LOCAL_WAITING_TIME:
      return getLocalWaitingTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FULL_PROBE:
      return isSetFullProbe();
    case LOCAL_ENTER_TIME:
      return isSetLocalEnterTime();
    case LOCAL_WAITING_TIME:
      return isSetLocalWaitingTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TLocalFullProbe)
      return this.equals((TLocalFullProbe)that);
    return false;
  }

  public boolean equals(TLocalFullProbe that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fullProbe = true && this.isSetFullProbe();
    boolean that_present_fullProbe = true && that.isSetFullProbe();
    if (this_present_fullProbe || that_present_fullProbe) {
      if (!(this_present_fullProbe && that_present_fullProbe))
        return false;
      if (!this.fullProbe.equals(that.fullProbe))
        return false;
    }

    boolean this_present_localEnterTime = true;
    boolean that_present_localEnterTime = true;
    if (this_present_localEnterTime || that_present_localEnterTime) {
      if (!(this_present_localEnterTime && that_present_localEnterTime))
        return false;
      if (this.localEnterTime != that.localEnterTime)
        return false;
    }

    boolean this_present_localWaitingTime = true;
    boolean that_present_localWaitingTime = true;
    if (this_present_localWaitingTime || that_present_localWaitingTime) {
      if (!(this_present_localWaitingTime && that_present_localWaitingTime))
        return false;
      if (this.localWaitingTime != that.localWaitingTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFullProbe()) ? 131071 : 524287);
    if (isSetFullProbe())
      hashCode = hashCode * 8191 + fullProbe.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(localEnterTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(localWaitingTime);

    return hashCode;
  }

  @Override
  public int compareTo(TLocalFullProbe other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFullProbe()).compareTo(other.isSetFullProbe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullProbe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullProbe, other.fullProbe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocalEnterTime()).compareTo(other.isSetLocalEnterTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalEnterTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localEnterTime, other.localEnterTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocalWaitingTime()).compareTo(other.isSetLocalWaitingTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalWaitingTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localWaitingTime, other.localWaitingTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TLocalFullProbe(");
    boolean first = true;

    sb.append("fullProbe:");
    if (this.fullProbe == null) {
      sb.append("null");
    } else {
      sb.append(this.fullProbe);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localEnterTime:");
    sb.append(this.localEnterTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("localWaitingTime:");
    sb.append(this.localWaitingTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fullProbe != null) {
      fullProbe.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLocalFullProbeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TLocalFullProbeStandardScheme getScheme() {
      return new TLocalFullProbeStandardScheme();
    }
  }

  private static class TLocalFullProbeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TLocalFullProbe> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLocalFullProbe struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FULL_PROBE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fullProbe = new TFullProbe();
              struct.fullProbe.read(iprot);
              struct.setFullProbeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCAL_ENTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.localEnterTime = iprot.readI64();
              struct.setLocalEnterTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCAL_WAITING_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.localWaitingTime = iprot.readI64();
              struct.setLocalWaitingTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLocalFullProbe struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fullProbe != null) {
        oprot.writeFieldBegin(FULL_PROBE_FIELD_DESC);
        struct.fullProbe.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOCAL_ENTER_TIME_FIELD_DESC);
      oprot.writeI64(struct.localEnterTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCAL_WAITING_TIME_FIELD_DESC);
      oprot.writeI64(struct.localWaitingTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLocalFullProbeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TLocalFullProbeTupleScheme getScheme() {
      return new TLocalFullProbeTupleScheme();
    }
  }

  private static class TLocalFullProbeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TLocalFullProbe> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLocalFullProbe struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFullProbe()) {
        optionals.set(0);
      }
      if (struct.isSetLocalEnterTime()) {
        optionals.set(1);
      }
      if (struct.isSetLocalWaitingTime()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFullProbe()) {
        struct.fullProbe.write(oprot);
      }
      if (struct.isSetLocalEnterTime()) {
        oprot.writeI64(struct.localEnterTime);
      }
      if (struct.isSetLocalWaitingTime()) {
        oprot.writeI64(struct.localWaitingTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLocalFullProbe struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.fullProbe = new TFullProbe();
        struct.fullProbe.read(iprot);
        struct.setFullProbeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.localEnterTime = iprot.readI64();
        struct.setLocalEnterTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.localWaitingTime = iprot.readI64();
        struct.setLocalWaitingTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

