/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package usyd.distributed.scheduler.peacock.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-02")
public class TRotateProbesRequest implements org.apache.thrift.TBase<TRotateProbesRequest, TRotateProbesRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TRotateProbesRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRotateProbesRequest");

  private static final org.apache.thrift.protocol.TField FULL_PROBE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fullProbeIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField GLOBAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("globalInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRotateProbesRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRotateProbesRequestTupleSchemeFactory();

  public java.util.List<TFullProbe> fullProbeIds; // required
  public TGlobalStateInfo globalInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FULL_PROBE_IDS((short)1, "fullProbeIds"),
    GLOBAL_INFO((short)2, "globalInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FULL_PROBE_IDS
          return FULL_PROBE_IDS;
        case 2: // GLOBAL_INFO
          return GLOBAL_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FULL_PROBE_IDS, new org.apache.thrift.meta_data.FieldMetaData("fullProbeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFullProbe.class))));
    tmpMap.put(_Fields.GLOBAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("globalInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGlobalStateInfo.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRotateProbesRequest.class, metaDataMap);
  }

  public TRotateProbesRequest() {
  }

  public TRotateProbesRequest(
    java.util.List<TFullProbe> fullProbeIds,
    TGlobalStateInfo globalInfo)
  {
    this();
    this.fullProbeIds = fullProbeIds;
    this.globalInfo = globalInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRotateProbesRequest(TRotateProbesRequest other) {
    if (other.isSetFullProbeIds()) {
      java.util.List<TFullProbe> __this__fullProbeIds = new java.util.ArrayList<TFullProbe>(other.fullProbeIds.size());
      for (TFullProbe other_element : other.fullProbeIds) {
        __this__fullProbeIds.add(new TFullProbe(other_element));
      }
      this.fullProbeIds = __this__fullProbeIds;
    }
    if (other.isSetGlobalInfo()) {
      this.globalInfo = new TGlobalStateInfo(other.globalInfo);
    }
  }

  public TRotateProbesRequest deepCopy() {
    return new TRotateProbesRequest(this);
  }

  @Override
  public void clear() {
    this.fullProbeIds = null;
    this.globalInfo = null;
  }

  public int getFullProbeIdsSize() {
    return (this.fullProbeIds == null) ? 0 : this.fullProbeIds.size();
  }

  public java.util.Iterator<TFullProbe> getFullProbeIdsIterator() {
    return (this.fullProbeIds == null) ? null : this.fullProbeIds.iterator();
  }

  public void addToFullProbeIds(TFullProbe elem) {
    if (this.fullProbeIds == null) {
      this.fullProbeIds = new java.util.ArrayList<TFullProbe>();
    }
    this.fullProbeIds.add(elem);
  }

  public java.util.List<TFullProbe> getFullProbeIds() {
    return this.fullProbeIds;
  }

  public TRotateProbesRequest setFullProbeIds(java.util.List<TFullProbe> fullProbeIds) {
    this.fullProbeIds = fullProbeIds;
    return this;
  }

  public void unsetFullProbeIds() {
    this.fullProbeIds = null;
  }

  /** Returns true if field fullProbeIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFullProbeIds() {
    return this.fullProbeIds != null;
  }

  public void setFullProbeIdsIsSet(boolean value) {
    if (!value) {
      this.fullProbeIds = null;
    }
  }

  public TGlobalStateInfo getGlobalInfo() {
    return this.globalInfo;
  }

  public TRotateProbesRequest setGlobalInfo(TGlobalStateInfo globalInfo) {
    this.globalInfo = globalInfo;
    return this;
  }

  public void unsetGlobalInfo() {
    this.globalInfo = null;
  }

  /** Returns true if field globalInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalInfo() {
    return this.globalInfo != null;
  }

  public void setGlobalInfoIsSet(boolean value) {
    if (!value) {
      this.globalInfo = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FULL_PROBE_IDS:
      if (value == null) {
        unsetFullProbeIds();
      } else {
        setFullProbeIds((java.util.List<TFullProbe>)value);
      }
      break;

    case GLOBAL_INFO:
      if (value == null) {
        unsetGlobalInfo();
      } else {
        setGlobalInfo((TGlobalStateInfo)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FULL_PROBE_IDS:
      return getFullProbeIds();

    case GLOBAL_INFO:
      return getGlobalInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FULL_PROBE_IDS:
      return isSetFullProbeIds();
    case GLOBAL_INFO:
      return isSetGlobalInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TRotateProbesRequest)
      return this.equals((TRotateProbesRequest)that);
    return false;
  }

  public boolean equals(TRotateProbesRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fullProbeIds = true && this.isSetFullProbeIds();
    boolean that_present_fullProbeIds = true && that.isSetFullProbeIds();
    if (this_present_fullProbeIds || that_present_fullProbeIds) {
      if (!(this_present_fullProbeIds && that_present_fullProbeIds))
        return false;
      if (!this.fullProbeIds.equals(that.fullProbeIds))
        return false;
    }

    boolean this_present_globalInfo = true && this.isSetGlobalInfo();
    boolean that_present_globalInfo = true && that.isSetGlobalInfo();
    if (this_present_globalInfo || that_present_globalInfo) {
      if (!(this_present_globalInfo && that_present_globalInfo))
        return false;
      if (!this.globalInfo.equals(that.globalInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFullProbeIds()) ? 131071 : 524287);
    if (isSetFullProbeIds())
      hashCode = hashCode * 8191 + fullProbeIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetGlobalInfo()) ? 131071 : 524287);
    if (isSetGlobalInfo())
      hashCode = hashCode * 8191 + globalInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRotateProbesRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFullProbeIds()).compareTo(other.isSetFullProbeIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullProbeIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullProbeIds, other.fullProbeIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGlobalInfo()).compareTo(other.isSetGlobalInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalInfo, other.globalInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRotateProbesRequest(");
    boolean first = true;

    sb.append("fullProbeIds:");
    if (this.fullProbeIds == null) {
      sb.append("null");
    } else {
      sb.append(this.fullProbeIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("globalInfo:");
    if (this.globalInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.globalInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (globalInfo != null) {
      globalInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRotateProbesRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRotateProbesRequestStandardScheme getScheme() {
      return new TRotateProbesRequestStandardScheme();
    }
  }

  private static class TRotateProbesRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRotateProbesRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRotateProbesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FULL_PROBE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.fullProbeIds = new java.util.ArrayList<TFullProbe>(_list10.size);
                TFullProbe _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new TFullProbe();
                  _elem11.read(iprot);
                  struct.fullProbeIds.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setFullProbeIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GLOBAL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.globalInfo = new TGlobalStateInfo();
              struct.globalInfo.read(iprot);
              struct.setGlobalInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRotateProbesRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fullProbeIds != null) {
        oprot.writeFieldBegin(FULL_PROBE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fullProbeIds.size()));
          for (TFullProbe _iter13 : struct.fullProbeIds)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.globalInfo != null) {
        oprot.writeFieldBegin(GLOBAL_INFO_FIELD_DESC);
        struct.globalInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRotateProbesRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRotateProbesRequestTupleScheme getScheme() {
      return new TRotateProbesRequestTupleScheme();
    }
  }

  private static class TRotateProbesRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRotateProbesRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRotateProbesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFullProbeIds()) {
        optionals.set(0);
      }
      if (struct.isSetGlobalInfo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFullProbeIds()) {
        {
          oprot.writeI32(struct.fullProbeIds.size());
          for (TFullProbe _iter14 : struct.fullProbeIds)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetGlobalInfo()) {
        struct.globalInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRotateProbesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fullProbeIds = new java.util.ArrayList<TFullProbe>(_list15.size);
          TFullProbe _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new TFullProbe();
            _elem16.read(iprot);
            struct.fullProbeIds.add(_elem16);
          }
        }
        struct.setFullProbeIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.globalInfo = new TGlobalStateInfo();
        struct.globalInfo.read(iprot);
        struct.setGlobalInfoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

